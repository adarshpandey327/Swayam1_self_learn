class Solution {
private:
    bool b_search(vector<int> nums, int s, int e, int target) {
        int mid = (s + e) / 2;
        while (s <= e) {
            if (nums[mid] == target)
                return 1;
            else if (nums[mid] > target)
                e = mid - 1;
            else {
                s = mid + 1;
            }
            mid = (s + e) / 2;
        }
        return 0;
    }

public:
    int search(vector<int>& nums, int target) {
        int n = nums.size();
        int s = 0, e = n - 1;
        int mid = (s + e) / 2;
        while (s < e) {
            while(s<e && nums[s]==nums[s+1]) s++; 
            while(s<e && nums[e]==nums[e-1]) e--;
            if (nums[mid] >= nums[0]) {
                s = mid + 1;
            } else {
                e = mid;
            }
            mid = (s + e) / 2;
        }
        int pivot = s;
        if (target >= nums[pivot] && target <= nums[n - 1]) {
            return b_search(nums, pivot, n - 1, target);
        } else
            return b_search(nums, 0, pivot - 1, target);
    }
};
